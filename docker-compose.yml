services:
  app:
    extends:
      file: ./example-app.template.docker-compose.yml
      service: app-jmx-config
    networks:
      - elastic-otel

  otel-collector:
    image: otel/opentelemetry-collector
    ports:
      - 55680:55680
      - 55681:55681
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - './configs/otel-config.yml:/etc/otel-collector-config.yaml'
    networks:
      - elastic-otel
    environment:
      ES_APM_ENDPOINT: http://fleet-server:8200
      ES_APM_BEARER_TOKEN: ${ES_APM_BEARER_TOKEN}


# Elastic (let this container handle setting up the stack and terminate)
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    networks:
      - elastic-otel
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        echo "Setting kibana_system password";
        until curl -s -X POST -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" http://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '

  elasticsearch:
    networks:
      - elastic-otel
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    depends_on:
      - setup
    volumes:
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - action.destructive_requires_name=false
      - bootstrap.memory_lock=true
      - cluster.name=${CLUSTER_NAME}
      - cluster.routing.allocation.disk.threshold_enabled=false
      - discovery.type=single-node
      - http.host=0.0.0.0
      - network.host=0.0.0.0
      - transport.host=127.0.0.1
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.security.authc.anonymous.roles=remote_monitoring_collector
      - xpack.security.authc.api_key.enabled=true
      - xpack.security.authc.token.enabled=true
      - xpack.security.enabled=true
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:9200 | grep -q 'HTTP/1.1 200 OK'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    networks:
      - elastic-otel
    volumes:
      - kibanadata:/usr/share/kibana/data
      - ./configs/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - XPACK_FLEET_AGENTS_FLEET_SERVER_HOSTS=["http://fleet-server:8220"]
      - XPACK_FLEET_AGENTS_ELASTICSEARCH_HOSTS=["http://elasticsearch:9200"]
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  fleet-server:
    image: docker.elastic.co/beats/elastic-agent:${STACK_VERSION}
    depends_on:
      kibana:
        condition: service_healthy
    networks:
      - elastic-otel
    ports:
      - 8220:8220
      - 8200:8200
    container_name: fleet-server
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -k http://localhost:8220/api/status | grep -q 'HEALTHY'" ]
      retries: 300
      interval: 1s
    restart: always
    environment:
      - ELASTICSEARCH_HOST=http://elasticsearch:9200
      - FLEET_SERVER_ELASTICSEARCH_HOST=http://elasticsearch:9200
      - FLEET_SERVER_ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - FLEET_SERVER_ELASTICSEARCH_USERNAME=elastic
      - FLEET_SERVER_ENABLE=1
      - FLEET_SERVER_INSECURE_HTTP=true
      - FLEET_SERVER_POLICY_ID=fleet-server-apm
      - FLEET_URL=http://fleet-server:8220
      - KIBANA_FLEET_HOST=http://kibana:5601
      - KIBANA_FLEET_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_FLEET_SETUP=true
      - KIBANA_FLEET_USERNAME=elastic

volumes:
  esdata01:
    driver: local
  kibanadata:
    driver: local

networks:
  elastic-otel:
    driver: bridge